@page "/robots"

@inject RobotService _robotService
@inject IToastService _toastService

<button class="btn btn-light" title="Add Robot" @onclick="() => ShowModal()"><span class="oi oi-plus"></span></button>

<table class="table table-sm">
    <thead>
        <tr>
            <th>Robot Number</th>
            <th>W-L-T</th>
            <th>Entered By</th>
            <th>Entered Date</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (_robots != null)
        {
            @foreach (var robot in _robots.OrderBy(r => r.RobotNumber))
            {
                <tr @onclick="() => ShowModal(robot)">
                    <td>@robot.RobotNumber</td>
                    <td>@($"{robot.WinCount}-{robot.LossCount}-{robot.TieCount}")</td>
                    <td>@robot.EnteredBy</td>
                    <td>@robot.EnteredDate</td>
                    <td>
                        <button class="btn btn-light" title="Edit Robot" @onclick="() => ShowModal(robot)"  @onclick:stopPropagation="true"><span class="oi oi-pencil"></span></button>
                        <button class="btn btn-light" title="Delete Robot" @onclick="() => ShowModal(robot, true)" @onclick:stopPropagation="true"><span class="oi oi-trash"></span></button>
                    </td>
                </tr>
            }
        }
        else
        {
            <p><em>Loading...</em></p>
        }
    </tbody>
</table>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; }

    private List<Robot> _robots;

    protected override async Task OnInitializedAsync()
    {
        await LoadRobots();
    }

    private async Task LoadRobots()
    {
        try
        {
            _robots = await _robotService.GetRobots();
        }
        catch
        {
            _toastService.ShowError("Error loading robots.");
        }
    }

    private async Task ShowModal(Robot robot = null, bool isDeleting = false)
    {
        IModalReference modalReference = null;

        if (robot == null)
        {
            modalReference = ModalService.Show<RobotForm>("Add Robot");
        }

        ModalParameters parameters = new ModalParameters();
        parameters.Add(nameof(RobotForm.InputRobot), robot);
        parameters.Add(nameof(RobotForm.IsDeleting), isDeleting);

        if (isDeleting)
        {
            modalReference = ModalService.Show<RobotForm>("Delete Robot", parameters);
        }
        else if (robot != null)
        {
            modalReference = ModalService.Show<RobotForm>("Edit Robot", parameters);
        }

        ModalResult result = await modalReference.Result;

        if (!result.Cancelled)
        {
            await Task.Delay(1);
            await LoadRobots();
            StateHasChanged();
        }
    }
}
